#!/bin/sh
SOURCE="$(dirname $0)/..";
APP=$1
PROJECT=$2
TARGET=$3


if test "$APP" = '--help' || test "$APP" = '-h' || test "$APP" = ''; then
    echo "Usage: $(basename $0) APPLICATION PROJECTDIR TARGETDIR\n"
    echo 'Build an instance of a Metapolator application as a HTML website to be served (statically) from any simple HTTP file server.\n'

    echo 'APPLICATION: the Metapolator application to be exported, choices are:'
    echo '\t * metapolator'
    echo '\t * red-pill'
    echo '\t * slider-demo'
    echo '\t * stand-alone'
    echo '\t * --help: displays this page'

    echo 'PROJECTDIR: a Metapolator project directory.'

    echo 'TARGETDIR: the target directory of this operation.'


    exit 0;
fi

#
lessfile=0
assetsrootdir=''
case $APP in
    metapolator)
        mainfile=metapolatorMain
        lessfile=$SOURCE/app/lib/ui/metapolator/app.less
        htmlfile=metapolator.html
        assetsrootdir=lib/ui/metapolator
        ;;
    red-pill)
        mainfile=redPillMain
        lessfile=$SOURCE/app/lib/ui/redPill/app.less
        htmlfile=red-pill.html
        ;;
    slider-demo)
        mainfile=sliderDemoMain
        htmlfile=slider-demo.html
        ;;
    stand-alone)
        mainfile=metapolatorStandAlone
        htmlfile=slider-demo.html
        ;;
    *) echo "Invalid selection! Try: $(basename $0) --help"
       exit 1
       ;;
esac

echo "Exporting $APP"

mkdir "$TARGET" \
    && rsync -vvap "$PROJECT/" "$TARGET/project/"\
    && cp "$SOURCE/README.md" "$TARGET" \
    && cp "$SOURCE/LICENSE.txt" "$TARGET" \
    || echo "ERROR: failed copying resources." \
    && exit 1 ;



if test $lessfile != 0; then
    # build the less to css
    node $SOURCE/node_modules/.bin/lessc \
        --include-path="$SOURCE/app/" \
        --strict-imports $lessfile \
        --rootpath="$assetsrootdir/" \
        "$TARGET/main.css";
fi

if test "$assetsrootdir" != ''; then
    test -d "$TARGET/$assetsrootdir" || mkdir -p "$TARGET/$assetsrootdir";
    cp -R $SOURCE/app/$assetsrootdir/assets $TARGET/$assetsrootdir/assets;
fi


# copy files not suited for the optimizer

# The optimizer won't include this, because we load it as a shim
# when the browser has only the older (i.e. non-direct) Harmony Proxies
MODULE_0="lib/bower_components/harmony-reflect/reflect.js"
# The optimizer fails on Harmony generators
MODULE_1="lib/rendering/glyphBasics.es6.js"
MODULE_2="lib/project/UFOExportController.es6.js"
MODULE_3="lib/project/OTFExportController.es6.js"
# We have a feature detection in the main file, if generators
# are not supported, this file needs to be present
MODULE_4="lib/rendering/glyphBasics.js"
MODULE_5="lib/project/UFOExportController.js"
MODULE_6="lib/project/OTFExportController.js"
MODULES="$MODULE_0 $MODULE_1 $MODULE_2 $MODULE_3 $MODULE_4 $MODULE_5 $MODULE_6"
for module in $MODULES; do
    mkdir -p "$(dirname $TARGET/$module)" && cp "$SOURCE/app/$module" "$TARGET/$module";
done

# build the javascript into one file
node $SOURCE/node_modules/.bin/r.js -o \
    optimize=none\
    mainConfigFile="$SOURCE/app/lib/browserConfig.js" \
    baseUrl="$SOURCE/app/lib" \
    paths.requireLib="bower_components/requirejs/require" \
    name="$mainfile" \
    include=requireLib,browserConfig \
    out="$TARGET/$mainfile"".js";

cp $SOURCE/app/lib/html/$htmlfile $TARGET/index.html;

for line in $(find $TARGET -maxdepth 1 -name "*.html" -type f); do
  echo "activating production <header> of $line";
  mv $line "$line~";
  sed s":<!-- development -->:<!-- development:" "$line~" | \
      sed s":<!-- production:<!-- production -->:" > "$line";
  unlink "$line~";
done


# make a directory listing at index.html in $TARGET for every directory recursively

# There is a HTTP HEAD request to test whether a dir exists.
# git-hub pages does not return a directory listing, so we trick it
# into returning a HTTP 200 status code
# To read the dir, our file system abstraction would expect a \n separated list of
# directory contents, where directories end with a slash "/"
TARGETPROJECT="$TARGET/project"
for line in $(find $TARGETPROJECT -type d); do
    touch "$line/index.html";
    if [ "$line" = "$TARGETPROJECT" ]; then
        continue;
    fi
    echo "$(basename $line)/" >> "$(dirname $line)/index.html";
done
echo "----------------------";
for line in $(find $TARGETPROJECT -type f); do
    if [ "$(basename $line)" = 'index.html' ]; then
        continue;
    fi
    echo "$(basename $line)" >> "$(dirname $line)/index.html";
done
