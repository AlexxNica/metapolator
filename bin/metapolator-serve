#!/bin/sh
__hash_bang_trick=/* exec /usr/bin/env node --harmony "$0" "$@"  # -*- mode: javascript; -*- */undefined

"use strict";

exports.command = {
    description: 'Serve a metapolator application loading a metapoltor project UFO (default: current directory).'
  , arguments: '[ufo]'
};

var path = require('path');
var requirejs = require('requirejs');
var express = require('express');
require('rootpath')();
requirejs.config(require('config'));

if (require.main === module) {
    requirejs([
        'commander'
      , 'metapolator/parseArgs'
      , 'metapolator/errors'
      , 'ufojs/tools/io/staticNodeJS'
      , 'restfs'
      , 'socket.io'
      , 'fsEventsServer'
    ], function (
        program
      , parseArgs
      , errors
      , io
      , restfs
      , SocketIO
      , fsEventsServer
    ) {
        var CommandLineError = errors.CommandLine
          , applications = {
                'red-pill': {
                    index: 'red-pill.html'
                  , name: 'the Red Pill'
                }
              , 'metapolator': {
                    index: 'metapolator.html'
                  , name: 'the Blue Pill'
                }
            }
          ;

        function mountAndMonitorRESTDirectory(location, baseDir, socketIO, app) {
            var relativeLocation = location[0] === '/'
                    ? location.slice(1)
                    : location
              , socketNamespace = socketIO.of('/fsEvents/' + relativeLocation)
              ;
            app.use(location, restfs(baseDir));
            return fsEventsServer.createEmitter(
                                socketNamespace, baseDir, relativeLocation + '/');
        }

        function getPort(program) {
            if(program.port === undefined)
                program.port = parseInt(process.env.RED_PILL_PORT) || 0;
            return program.port;
        }

        function getApplication(key) {
            if(key === undefined)
                key = 'metapolator';
            if(!(key in applications))
                throw new CommandLineError('"'+key+'" is no known application.');
            return applications[key];
        }

        program._name = path.basename(process.argv[1]).replace('-', ' ');
        program.arguments(exports.command.arguments)
        .description(exports.command.description)
        .action(function(projectDir) {
            // expect require.main.filename to be path/to/metapolator-code/bin/<command>
            // thus path/to/metapolator-code is the root directory
            var rootDir = path.dirname(path.dirname(require.main.filename))
              , application = getApplication(program.application)
              , libDir = rootDir + '/app/lib'
              , htmlDir = rootDir + '/app/lib/html'
              , index = htmlDir + '/' + application.index
              , project = parseArgs.project(io, projectDir)
              , app = express()
              , server = app.listen(getPort(program))
              , socketIO = SocketIO(server)
              ;
            app.get('/', function(req, res, next) { res.sendfile(index); }) // index file
               // any .html file
               .get('/*.html', function(req, res, next) {
                    var i = req.path.lastIndexOf('/');
                    if(i === -1){
                        next();
                        return;
                    }
                    res.sendfile(htmlDir + req.path.slice(i));
               })
               .use('/lib', express.static(libDir)) // application code
               ;
            // project is a RESTful directory with a socket io channel
            // that emits change events at "/fsEvents/project"
            mountAndMonitorRESTDirectory('/project', project.baseDir
                                                        , socketIO, app);

            if (server.address()) {
                console.warn('Metapolator: Serving ' + application.name + '.');
                console.warn('Open http://localhost:'+server.address().port+' in your browser.');
                console.warn('If you are using Chromium (or Chrome), you should run it as: chromium --js-flags="--harmony_proxies"');
            }
        })
        .option('-a, --application <'+(Object.keys(applications).join('|'))+'>', 'The main application to serve at index.html (default: metapolator)')
        .option('-p, --port <n>', 'The port to listen on (default: environment variable RED_PILL_PORT (if unset, random))', parseInt)
        ;
        program.parse(process.argv);
    }
)}
