#!/bin/sh
SOURCE="$(dirname $0)/..";
PROJECT=$1
TARGET=$2

mkdir "$TARGET" \
    && cp -a "$PROJECT/." "$TARGET/project" \
    && cp "$SOURCE/README.md" "$TARGET" \
    && cp "$SOURCE/LICENSE.txt" "$TARGET";

# build the javascript into one file
node $SOURCE/node_modules/.bin/r.js -o \
        optimize=none\
        mainConfigFile="$SOURCE/app/lib/redPillMain.js" \
        baseUrl="$SOURCE/app/lib" \
        paths.requireLib="bower_components/requirejs/require" \
        name="redPillMain" \
        include=requireLib \
        out="$TARGET/main.js";

# build the less to css
node $SOURCE/node_modules/.bin/lessc \
        --include-path="$SOURCE/app/" \
        --strict-imports "$SOURCE/app/lib/ui/redPill/app.less" \
        "$TARGET/main.css";

sed s":<!-- development -->:<!-- development:" "$SOURCE/app/red-pill.html" | \
    sed s":<!-- production:<!-- production -->:" > "$TARGET/index.html";

# make a directory listing at index.html in $TARGET for every directory recursively

# There is a HTTP HEAD request to test whether a dir exists.
# git-hub pages does not return a directory listing, so we trick it
# into returning a HTTP 200 status code
# To read the dir, our file system abstraction would expect a \n separated list of
# directory contents, where directories end with a slash "/"
TARGETPROJECT="$TARGET/project"
for line in $(find $TARGETPROJECT -type d); do
    touch "$line/index.html";
    if [ "$line" = "$TARGETPROJECT" ]; then
        continue;
    fi
    echo "$(basename $line)/" >> "$(dirname $line)/index.html";
done
echo "----------------------";
for line in $(find $TARGETPROJECT -type f); do
    if [ "$(basename $line)" = 'index.html' ]; then
        continue;
    fi
    echo "$(basename $line)" >> "$(dirname $line)/index.html";
done
