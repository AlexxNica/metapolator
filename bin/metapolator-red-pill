#!/bin/sh
__hash_bang_trick=/* exec /usr/bin/env node --harmony "$0" "$@"  # -*- mode: javascript; -*- */undefined

"use strict";

exports.command = {
    description: 'Open a UFO (default: current directory) in the red-pill web interface'
  , arguments: '[ufo]'
};

var path = require('path');
var requirejs = require('requirejs');
require('rootpath')();
requirejs.config(require('config'));

if (require.main === module) {
    requirejs([
        'commander'
      , 'metapolator/parseArgs'
      , 'ufojs/tools/io/staticNodeJS'
      , 'fs'
      , 'restfs'
    ], function (
        program
      , parseArgs
      , io
      , fs
      , restfs
    ) {
        program._name = path.basename(process.argv[1], '.js').replace('-', ' ');
        program.arguments(exports.command.arguments)
        .description(exports.command.description)
        .action(function(projectDir) {
            var express = require('express')
              , app = express()
            // expect require.main.filename to be path/to/metapolator-code/bin/<command>
            // thus path/to/metapolator-code is the root directory
              , rootDir = path.dirname(path.dirname(require.main.filename))
              , libDir = rootDir + '/app/lib'
              , index = rootDir + '/app/red-pill.html'
            ;

            var project = parseArgs.project(io, projectDir);

            // red-pill.html as index
            // all contents of /lib are served for GET at /lib
            // the current working directory
            // if it is a metapolator project
            // served as a full featured REST service at /project
            // dirs end with a / files don't end with a /
            // we resolve all ./ and ../ if we have a 'buffer underrun' because
            // ../ removes more dirs than there are in path, we return a 500


            // serve index at '' (index)
            // serve hello world at project/{...}

            // simple logger
            // Let this be the first middleware, to make sure every request
            // is logged to console.
            // Uncomment when of interest.
            // app.use(function(req, res, next) {
            //     console.log('logger ! %s %s', req.method, req.url);
            //     next();
            // });

            app.get('/', function(req, res, next) {
                res.sendfile(index);
            });

            // serve the contents of rootDir + "app/lib" at lib
            app.use('/lib', express.static(libDir));

            // project is a RESTful directory
            app.use('/project', restfs(project.baseDir));

            if (program.port === undefined)
                program.port = parseInt(process.env.RED_PILL_PORT);
            var server = app.listen(program.port || 0);
            if (server.address()) {
                console.warn('Metapolator: Serving the red pill.');
                console.warn('Open http://localhost:'+server.address().port+' in your browser.');
                console.warn('If you are using Chromium (or Chrome), you should run it as: chromium --js-flags="--harmony_proxies"');
            }
        })
        .option('-p, --port <n>', 'The port to listen on (default: environment variable RED_PILL_PORT (if unset, random))', parseInt);
        program.parse(process.argv);
    }
)}
